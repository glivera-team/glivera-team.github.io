---
layout: post
title:  "Organizing form elements with pug"
date:   2015-12-29 08:24:00 +0300
categories: pug,forms
lang: en
autor: Andrey Boyko
---
Hi, developer!

In order to layout faster and  to support the project in an easier way, we have made a pug mixin for form elements. It looks like a big sausage code:
{% highlight javascript %}
mixin form_element(config)
	//- default values
	- config.class_array = config.class_array || {}
	- config.class_array.block_class_mod = config.class_array.block_class_mod || ''
	- config.class_array.class_mod = config.class_array.class_mod || ''
	- config.class_array.elem_class = config.class_array.elem_class || ''
	- config.add_class = config.add_class || ''
	- config.placeholder = config.placeholder || ''
	if !config.id
		- config.id = config.title.replace(/\s/g, '_').replace(/[.,:;(){}/?!@#$%&*]/g, '')
	else
		- config.id = config.id.replace(/\s/g, '_').replace(/[.,:;(){}/?!@#$%&*]/g, '')
	if config.type === 'text' || config.type === 'password' || config.type === 'email' || config.type === 'textarea' || config.type === 'select' || config.type === 'file'
		dl.form_cell(class=config.class_array.block_class_mod)
			dt.form_c_hline(class=config.class_array.class_mod)
				label(for=config.id) #{config.title}
			dd.form_c_f_w(class=config.class_array.class_mod)
				if config.type === 'text' || config.type === 'password' || config.type === 'email'
					if config.value
						input.f_c_field(value=config.value type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
						block
					else
						input.f_c_field(type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
						block
				if config.type === 'textarea'
					textarea.f_c_field(type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder) #{config.value}
					block
				if config.type === 'file'
					input.f_c_field(type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
					.f_c_field_file_field
						span.f_c_field_file_text #{config.title}
						span.f_c_field_file_butt Choose File
				if config.type === 'select'
					select.f_c_field(id=config.id class='#{config.class_array.elem_class} #{config.add_class}' data-placeholder=config.placeholder)
						each option in config.options
							option(value=option)= option
					block
	if config.type === 'checkbox' || config.type === 'radio'
		label.lbl_rb_ch_block(class=config.class_array.block_class_mod)
			if config.checked
				input.lbl_inp_rb_ch(name=config.name type=config.type class='#{config.class_array.elem_class} #{config.add_class}' checked='checked')
			else
				input.lbl_inp_rb_ch(name=config.name type=config.type class='#{config.class_array.elem_class} #{config.add_class}')
			span.lbl_rb_ch_text(class=config.class_mod) #{config.title}
{% endhighlight %}

However, in reality it is a very simple mixin to use. With it, we can do the following types of form elements:

* input(type="text")
* input(type="password")
* input(type="email")
* input(type="checkbox")
* input(type="radio")
* select
* textarea

One example of a fetch:
{% highlight javascript %}
+form_element({
    type:'text',
    class_array:default_field,
    title:'some title',
    id:'some'
})
{% endhighlight %}

Let's first see how mixin works.

Note that the mixin has one parameter - config. This is the object that will contain our options. It the beginning, we declare the defaults. These values will be further used in mixin. If the value is not specified, we replace it with an empty string:
{% highlight javascript %}
//- default values
- config.class_array = config.class_array || {}
- config.class_array.block_class_mod = config.class_array.block_class_mod || ''
- config.class_array.class_mod = config.class_array.class_mod || ''
- config.class_array.elem_class = config.class_array.elem_class || ''
- config.add_class = config.add_class || ''
- config.placeholder = config.placeholder || ''
{% endhighlight %}

Next, we edit the identifier of our field. If it is not specified, it will be equal to the title parameter.
{% highlight javascript %}
if !config.id
		- config.id = config.title.replace(/\s/g, '_').replace(/[.,:;(){}/?!@#$%&*]/g, '')
	else
		- config.id = config.id.replace(/\s/g, '_').replace(/[.,:;(){}/?!@#$%&*]/g, '')
{% endhighlight %}

The essence of this operation is to bring the field id into a valid form. Let's look at these transformations using an example (before-after):
{% highlight javascript %}
'some text of id'➞'some_text_of_id'
'#some-?text of id?'➞'some-text_of_id'
{% endhighlight %}

After that,  mixin is divided into 2 main parts depending on the type of field. If it is input (type = "text"), input (type = "password"), input (type = "email"), select, textarea we will use the structure dl, dt, dd:
{% highlight html %}
<dl>
    <dt>
        <label for="some">Title of form element</label>
    </dt>
    <dd>
        <input type="text" id="some">
    </dd>
</dl>
{% endhighlight %}

We use this structure because it is the most semantic. You can read more about it in <a href="http://xiper.net/learn/tegofenshuj/semantic-html-forms" target="_blank">an article on</a>
To add modifier classes in a mixin, there is a class_array parameter (an array of classes). This is how a class is added to mixin:
{% highlight javascript %}

dt.form_c_hline(class=config.class_array.class_mod)
{% endhighlight %}

Here is an example of a fetching along with the definition of an array of classes.
{% highlight javascript %}
- var default_field = {block_class_mod:'form_cell_v1_mod',class_mod:'form_v1_mod', elem_class:'default_mod'}

+form_element({
    type:'text',
    class_array:default_field,
    title:'some title',
    id:'#some'
})
{% endhighlight %}

This is necessary in order to create several types of fields and then boldly reuse them. For example, you have 3 types of fields on your site (for example, input (type = "text")). You just create 3 such arrays and use them:
{% highlight javascript %}
- var default_field = {block_class_mod:'form_cell_v1_mod',class_mod:'form_v1_mod', elem_class:'default_mod'}
- var default_field = {block_class_mod:'form_cell_v2_mod',class_mod:'form_v2_mod', elem_class:'second_mod'}
- var default_field = {block_class_mod:'form_cell_v3_mod',class_mod:'form_v3_mod', elem_class:'third_mod'}
{% endhighlight %}

Next, let’s consider the following code snippet:
{% highlight javascript %}
if config.type === 'text' || config.type === 'password' || config.type === 'email'
    if config.value
        input.f_c_field(value=config.value type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
        block
    else
        input.f_c_field(type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
        block
if config.type === 'textarea'
    textarea.f_c_field(type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder) #{config.value}
    block
{% endhighlight %}
The separation is by field type, as well as by the value parameter. Pay attention to the expression ‘block’, it allows you to insert any elements after the field. Example link:
{% highlight javascript %}

+form_element({
	type:'text',
	class_array:default_field,
	title:'some title',
	id:'#some'
})
    a(href="#") some link after input
{% endhighlight %}

As a result, we get the following html:
{% highlight html %}
<dl class="form_cell form_cell_v1_mod">
    <dt class="form_c_hline form_v1_mod">
        <label for="some">some title</label>
    </dt>
    <dd class="form_c_f_w form_v1_mod">
        <input type="text" id="some" placeholder="" class="f_c_field default_mod ">
        <a href="#">some link after input</a>
    </dd>
</dl>
{% endhighlight %}

The link was inserted after input. For input (type = "file"), the following structure is used:
{% highlight javascript %}

if config.type === 'file'
	input.f_c_field(type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
	.f_c_field_file_field
		span.f_c_field_file_text #{config.title}
		span.f_c_field_file_butt Choose File
{% endhighlight %}

Everything is simple, may vary depending on the layout. For select the following structure is used:
{% highlight javascript %}
if config.type === 'select'
    select.f_c_field(id=config.id class='#{config.class_array.elem_class} #{config.add_class}' data-placeholder=config.placeholder)
        each option in config.options
            option(value=option)= option
    block
{% endhighlight %}

In other words, you need to pass an array of options for the select in the mixin fetch. Here is the example of the fetching:
{% highlight javascript %}
+form_element({
    type: 'select',
    class_array: default_field,
    title: 'some title',
    id: 'id',
    options: ['Option 1', 'Option 2', 'Option 3']
})
{% endhighlight %}

The structure for checkboxes and radio buttons is
{% highlight javascript %}
if config.type === 'checkbox' || config.type === 'radio'
    label.lbl_rb_ch_block(class=config.class_array.block_class_mod)
        if config.checked
            input.lbl_inp_rb_ch(name=config.name type=config.type class='#{config.class_array.elem_class} #{config.add_class}' checked='checked')
        else
            input.lbl_inp_rb_ch(name=config.name type=config.type class='#{config.class_array.elem_class} #{config.add_class}')
        span.lbl_rb_ch_text(class=config.class_mod) #{config.title}
{% endhighlight %}

This structure is most easily styled. Here, the separation goes by the parameter ‘checked’. This is where the mixin is completed.

## Fetch examples

### input(type="text")
pug:
{% highlight javascript %}
+form_element({
    type:'text',
    class_array:default_field,
    title:'some title',
    id:'#some'
})
{% endhighlight %}

html:
{% highlight html %}
<dl class="form_cell form_cell_v1_mod">
  <dt class="form_c_hline form_v1_mod">
    <label for="some">some title</label>
  </dt>
  <dd class="form_c_f_w form_v1_mod">
    <input type="text" id="some" placeholder="" class="f_c_field default_mod ">
  </dd>
</dl>
{% endhighlight %}

### input(type="password")
pug:
{% highlight javascript %}
+form_element({
	type:'password',
	class_array:default_field,
	title:'some title',
	id:'#some'
})
{% endhighlight %}

html:
{% highlight html %}
<dl class="form_cell form_cell_v1_mod">
  <dt class="form_c_hline form_v1_mod">
    <label for="some">some title</label>
  </dt>
  <dd class="form_c_f_w form_v1_mod">
    <input type="password" id="some" placeholder="" class="f_c_field default_mod ">
  </dd>
</dl>
{% endhighlight %}

### input(type="email")
pug:
{% highlight javascript %}
+form_element({
	type:'email',
	class_array:default_field,
	title:'some title',
	id:'#some'
})
{% endhighlight %}

html:
{% highlight html %}
<dl class="form_cell form_cell_v1_mod">
  <dt class="form_c_hline form_v1_mod">
    <label for="some">some title</label>
  </dt>
  <dd class="form_c_f_w form_v1_mod">
    <input type="email" id="some" placeholder="" class="f_c_field default_mod ">
  </dd>
</dl>
{% endhighlight %}

### textarea
pug:
{% highlight javascript %}
+form_element({
	type:'textarea',
	class_array:default_field,
	title:'some title',
	id:'#some'
})
{% endhighlight %}

html:
{% highlight html %}
<dl class="form_cell form_cell_v1_mod">
  <dt class="form_c_hline form_v1_mod">
    <label for="some">some title</label>
  </dt>
  <dd class="form_c_f_w form_v1_mod">
    <textarea type="textarea" id="some" placeholder="" class="f_c_field default_mod "></textarea>
  </dd>
</dl>
{% endhighlight %}

### input(type="checkbox")
pug:
{% highlight javascript %}
+form_element({
	type: 'checkbox',
	class_array: default_field,
	title: 'some title',
	id: 'id',
	add_class: 'someclass',
	name: 'radiobtn',
	checked: true
})
{% endhighlight %}

html:
{% highlight html %}
<label class="lbl_rb_ch_block form_cell_v1_mod">
  <input name="radiobtn" type="checkbox" checked="checked" class="lbl_inp_rb_ch default_mod someclass"><span class="lbl_rb_ch_text">some title</span>
</label>
{% endhighlight %}

### input(type="radio")
pug:
{% highlight javascript %}
+form_element({
	type: 'radio',
	class_array: default_field,
	title: 'some title',
	id: 'id',
	add_class: 'someclass',
	name:'radiobtn',
	checked:true
})
{% endhighlight %}

html:
{% highlight html %}
<label class="lbl_rb_ch_block form_cell_v1_mod">
  <input name="radiobtn" type="radio" checked="checked" class="lbl_inp_rb_ch default_mod someclass"><span class="lbl_rb_ch_text">some title</span>
</label>
{% endhighlight %}

### select
pug:
{% highlight javascript %}
+form_element({
	type: 'select',
	class_array: default_field,
	title: 'some title',
	id: 'id',
	add_class: 'someclass',
	options: ['Option 1', 'Option 2', 'Option 3']
})
{% endhighlight %}

html:
{% highlight html %}
<dl class="form_cell form_cell_v1_mod">
  <dt class="form_c_hline form_v1_mod">
    <label for="id">some title</label>
  </dt>
  <dd class="form_c_f_w form_v1_mod">
    <select id="id" data-placeholder="" class="f_c_field default_mod someclass">
      <option value="Option 1">Option 1</option>
      <option value="Option 2">Option 2</option>
      <option value="Option 3">Option 3</option>
    </select>
  </dd>
</dl>
{% endhighlight %}

## All options
* <b>type</b> - field type. Possible values are ‘text’, ’textarea’, ’email’, ’password’, ’checkbox’, ’radio’, ’select’.<b>Mandatory field</b>
* <b>title</b> - field name. Usually is located in dt, except checkbox and radio. <b>Mandatory field</b>
* <b>id</b> - field identifier.
* <b>class_array</b> - an array of modifier classes.
* <b>add_class</b> - additional class for the field.
* <b>value</b> - the value attribute for the field.
* <b>placeholder</b> - placeholder attribute for the field. For selects, it is added to the data-placeholder.
* <b>options</b> - an array of options. Only for selects.
* <b>name</b> - the name of the field. Only for checkbox and radio.
* <b>checked</b> - the checked attribute. Only for checkbox and radio.

That's all.
